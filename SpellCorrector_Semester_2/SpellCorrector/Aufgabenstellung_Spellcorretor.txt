Ziel dieses Übungsblatts wird es sein, mit Hilfe unserer Datenstrukturen (vor allem: Hash-Tabellen) eine effiziente Spell Correction zu realisieren. Gegeben sei ein Vokabular W, d.h. eine Menge an bekannten Worten und ein neues Wort, der sogenannte Query q. Im allgemeinen existiert kein zu q identisches Wort in unserem Vokabular, z.B. weil q Tippfehler enthält. Unser Ziel ist es daher, das zu q ähnlichste Wort w aus W zu finden.

"Ähnlichkeit" bedeutet hierbei, dass wir mit möglichst wenig Änderungsoperationen q in w verwandeln können. Eine Änderungsoperation wäre das Entfernen oder Einfügen eines Buchstabens. Im Beispiel oben wäre dementsprechend für q="missippi" das ähnlichste Wort "mississippi", mit drei Änderungsoperationen (dem Einfügen der Buchstaben "ssi").

Offensichtlich ist das Vokabular in der Praxis groß (hunderttausende bekannter Worte). Wir werden deshalb eine Datenstruktur aufbauen, so dass wir nicht sämtliche Wörter des Vokabulars einzeln durchlaufen und ihre Ähnlichkeit prüfen müssen, sondern gezielt das "passende" Wort finden.

Unsere Strategie ist hier abgebildet: Für jedes Wort unseres Vokabulars (z.B. w="tank") erzeugen wir reduzierte Versionen, indem wir null Buchstaben ("tank"), einen Buchstaben ("tan", "tnk", "tak", "ank"), zwei Buchstaben ("ta", "tn", "tk", "an", "ak", "nk") usw. entfernen. Diese reduzierten Versionen fügen wir in einen Index in Form einer Hash-Tabelle ein, und merken uns für jede Version aus welchem Originalwort sie stammt und mit wievielen Änderungen Δw man wieder zum Originalwort w gelangt.

Wird nun mit einem neuen Query angefragt (z.B. q="think"), führen wir dieselben Reduktionen durch. Für jede reduzierte Version können wir nun in der Hash-Tabelle nachschlagen und erhalten Distanzen zu den Worten des Vokabulars: z.B. können wir mit Δq=2 Änderungen aus "think" die reduzierte Version "tn" erzeugen, und hieraus widerum in Δw=2 Änderungen das Wort w="tank". Die Distanz zwischen "think" und "tank" beträgt somit maximal 4. Wiederholen wir dieses "Nachschlagen" für sämtliche Reduktionen von q, finden wir die ähnlichsten Worte, d.h. die mit den wenigsten Änderungsoperationen, in W.
